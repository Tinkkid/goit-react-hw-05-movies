{"version":3,"file":"static/js/415.2c65f8ce.chunk.js","mappings":"4NAGaA,EAAOC,EAAAA,EAAAA,GAAH,wRAaJC,EAAYD,EAAAA,EAAAA,GAAH,8KASTE,GAAaF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,iNAYVI,EAAQJ,EAAAA,EAAAA,IAAH,8DAKLK,EAAQL,EAAAA,EAAAA,EAAH,0G,SCElB,EArCmB,SAAC,GAAgB,IAAdM,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAACT,EAAD,UACGO,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAaC,EAA3B,EAA2BA,aAA3B,OACV,SAACZ,EAAD,WACE,UAACC,EAAD,CAAYY,GAAE,kBAAaJ,GAAMK,MAAO,CAAEC,KAAMT,GAAhD,WACE,SAACH,EAAD,CACEa,IACEL,EAAW,0CAC4BA,GAZrD,2EAeYM,IAAKP,GAAgB,cAEvB,SAACN,EAAD,UAAQM,GAAgB,cACxB,SAACN,EAAD,UACGQ,EAAe,IAAIM,KAAKN,GAAcO,cAAgB,SAZ7CV,EADN,KAoBjB,C,6FCOD,UAhCa,WACX,OAA8BW,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,MAArC,eAAOf,EAAP,KAAekB,EAAf,KAaA,IAXAC,EAAAA,EAAAA,YAAU,WACRF,GAAW,IACXG,EAAAA,EAAAA,MACGC,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACPJ,EAAUI,EACX,IACAC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EACf,IACAE,QAAQT,GAAW,GACvB,GAAE,IACEjB,EAEL,OACE,6BACE,eACE2B,MAAO,CACLC,UAAW,UAFf,4BAOCZ,IAAW,SAAC,IAAD,IACXhB,IAAU,SAAC,IAAD,CAAYA,OAAQA,MAGpC,C,yLCjCK6B,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CAAEC,QAHI,mCAGcC,SAAU,QAASC,eAAe,KAGnDf,EAAqB,mCAAG,sGACZS,EAASO,IAAI,uBADD,uBAC3BC,EAD2B,EAC3BA,KAD2B,kBAE5BA,GAF4B,2CAAH,qDAKrBC,EAAgB,mCAAG,WAAMC,GAAN,yFACPV,EAASO,IAAI,gBAAiB,CACnDJ,OAAQ,CACNO,MAAAA,KAH0B,uBACtBF,EADsB,EACtBA,KADsB,kBAMvBA,GANuB,2CAAH,sDAShBG,EAAgB,mCAAG,WAAMpC,GAAN,yFACPyB,EAASO,IAAT,iBAAuBhC,IADhB,uBACtBiC,EADsB,EACtBA,KADsB,kBAEvBA,GAFuB,2CAAH,sDAKhBI,EAAgB,mCAAG,WAAMrC,GAAN,yFACPyB,EAASO,IAAT,iBAAuBhC,EAAvB,aADO,uBACtBiC,EADsB,EACtBA,KADsB,kBAEvBA,EAAKK,MAFkB,2CAAH,sDAKhBC,EAAgB,mCAAG,WAAMvC,GAAN,yFACPyB,EAASO,IAAT,iBAAuBhC,EAAvB,aADO,uBACtBiC,EADsB,EACtBA,KADsB,kBAEvBA,EAAKf,SAFkB,2CAAH,qD","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/Home.jsx","services/api_movie.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const ItemMovie = styled.li`\n  text-decoration: none;\n  margin-bottom: 8px;\n  background-color: #c2fbd7;\n  &:hover {\n    box-shadow: rgba(58, 80, 62, 0.1) 0px 4px 12px;\n  }\n`;\n\nexport const LinkStyled = styled(Link)`\n  text-decoration: none;\n  color: inherit;\n  border-bottom: 1px solid #eee;\n  border-left: 1px solid #eee;\n  border-right: 1px solid #eee;\n\n  &:hover {\n    color: #24964f;\n  }\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n  object-fit: cover;\n`;\n\nexport const Title = styled.p`\n  text-align: center;\n  font-size: 20px;\n  font-weight: bold;\n  margin: 10px;\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { List, ItemMovie, LinkStyled, Image, Title } from './MoviesList.styled';\n\nconst defaultImage =\n  'https://cdn.pixabay.com/photo/2016/11/09/23/16/music-1813100_960_720.png';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <List>\n      {movies.map(({ id, title, poster_path, release_date }) => (\n        <ItemMovie key={id}>\n          <LinkStyled to={`/movies/${id}`} state={{ from: location }}>\n            <Image\n              src={\n                poster_path\n                  ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                  : defaultImage\n              }\n              alt={title ? title : 'No title'}\n            />\n            <Title>{title ? title : 'No title'}</Title>\n            <Title>\n              {release_date ? new Date(release_date).getFullYear() : ''}\n            </Title>\n          </LinkStyled>\n        </ItemMovie>\n      ))}\n    </List>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n      release_date: PropTypes.string,\n    })\n  ),\n};\n\nexport default MoviesList;\n","import { useState, useEffect } from 'react';\n\nimport { fetchMovieTrendingDay } from 'services/api_movie';\nimport MoviesList from '../components/MoviesList/MoviesList';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Home = () => {\n  const [loading, setLoading] = useState(false);\n  const [movies, setMovies] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    fetchMovieTrendingDay()\n      .then(({ results }) => {\n        setMovies(results);\n      })\n      .catch(error => {\n        console.error(error);\n      })\n      .finally(setLoading(false));\n  }, []);\n  if (!movies) return;\n\n  return (\n    <main>\n      <h2\n        style={{\n          textAlign: 'center',\n        }}\n      >\n        Trending today\n      </h2>\n      {loading && <Loader />}\n      {movies && <MoviesList movies={movies} />}\n    </main>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst API_KEY = 'a85bcd146b051e6a179fdcb9f5b0d494';\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: { api_key: API_KEY, language: 'en-US', include_adult: false },\n});\n\nexport const fetchMovieTrendingDay = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n  return data;\n};\n\nexport const fetchMovieSearch = async query => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n\nexport const fetchMovieDetail = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\n\nexport const fetchMovieActors = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data.cast;\n};\n\nexport const fetchMovieReview = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data.results;\n};\n"],"names":["List","styled","ItemMovie","LinkStyled","Link","Image","Title","movies","location","useLocation","map","id","title","poster_path","release_date","to","state","from","src","alt","Date","getFullYear","useState","loading","setLoading","setMovies","useEffect","fetchMovieTrendingDay","then","results","catch","error","console","finally","style","textAlign","instance","axios","baseURL","params","api_key","language","include_adult","get","data","fetchMovieSearch","query","fetchMovieDetail","fetchMovieActors","cast","fetchMovieReview"],"sourceRoot":""}